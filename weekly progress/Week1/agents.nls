buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  bus_route
  missed_passengers
]
 
globals [graph]

extensions [ nw ]

; get real shortest distance between any 2 bus_stops                                     : ask bus_stop 0 [ show nw:weighted-distance-to bus_stop 5 "route_size" ]
; get all bus stop between any 2 bus_stops than are being included in the shortest path  : ask bus_stop 0 [ show nw:turtles-on-weighted-path-to bus_stop 8 "route_size" ]

; Initialize bus
to init-buses
  ; Initialize your agents here.
  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
  ifelse bus_id mod 2 = 1 [
  set bus_route [ 9 8 2 8 6 8 9 20 12 15 18 15 0 14 23 13 22 21 10 13 23 19 1 7 17 11 16 5 10 4 3]
  ] [
  set bus_route [ 4 10 5 16 11 17 7 1 19 23 13 10 21 22 13 23 14 0 15 18 15 12 20 9 8 6 8 2 8 9 3 ] 
  ]
  set label bus_id
end

; Step function for bus
to execute-actions
  if count buses = 1 [
    add-bus 1
     add-bus 3
    add-bus 3
    add-bus 3
    add-bus 3
    add-bus 3
    add-bus 3
    add-bus 3
    add-bus 3
    ]
  ; Add decision making strategies for your agents here.
  move-bus
  
  if current_stop != -1 [
    ;pick up passengers
    pick-up-passengers-stop
    ;drop off passengers
    drop-off-passengers-stop
    ;determine whether is appropriate to add a bus
    ;add-bus-decision
  ]
  
  
  ;show current_stop
  ;show next_stop
  
  ; You are allowed to use the global variable 'ticks'.
end

to pick-up-passengers-stop
  
  foreach get-passengers-at-stop current_stop [
    if bus_type = 1 and length bus_passengers = 12 [
      ;show  word "full bus " bus_id 
      stop
    ]
    if bus_type = 2 and length bus_passengers = 60 [
      ;show  word "full bus " bus_id 
      stop
    ]
     if bus_type = 3 and length bus_passengers = 150 [
      ;show  word "full bus " bus_id 
      stop
    ]
    ;show word "add passenger " bus_id
    pick-up-passenger item 0 ?
    ]
   
end

to move-bus

  ifelse current_stop != -1
  ; if block
   [ 
     travel-to (item 0 bus_route) 
     set bus_route lput item 0 bus_route but-first bus_route
     ]
   ;else block
   [
     travel-to next_stop 
     ;show (word "goes to next stop:" next_stop)
     ]
   
   ;show bus_passengers
   
end

to drop-off-passengers-stop
  
  ; Iterate through passengers
  foreach bus_passengers [
    ; If the passenger is at the desirable location then it gets out
    if item 1 ? = current_stop [
      drop-off-passenger item 0 ?
      ;show word "drop passenger " bus_id
    ]   
  ]
  ;drop-off-passenger
  
end
  
to add-bus-decision
  
    if length get-passengers-at-stop current_stop > 0 [
      set  missed_passengers 0
      set missed_passengers missed_passengers + length get-passengers-at-stop current_stop 
      set missed_passengers missed_passengers + length get-passengers-at-stop previous_stop 
      set missed_passengers missed_passengers + length get-passengers-at-stop item 0 bus_route
      ;show word "goes to current_stop:" current_stop
      ;show word "goes to previous_stop:" previous_stop 
      ;show word "goes to next stop:" item 0 bus_route
      show word "bus : " bus_id
      show word "passengers missed : " missed_passengers 
    ]
    if ticks mod 50 = 0 [
      if missed_passengers > 50 and missed_passengers < 100 [
        add-bus 1 
      ] 
    
      if missed_passengers > 100 and missed_passengers < 150 [
       add-bus 2 
      ] 
    
      if missed_passengers > 150 [
       add-bus 3 
      ]
     ]
    
end